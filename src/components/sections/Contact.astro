---
import { services } from '../../data/services'
import Badge from '../Badge.astro'
---

<section id="contacto" class="px-6 lg:px-0 lg:w-5xl lg:mb-20 xl:w-6xl">
  <Badge>Contacto</Badge>
  <h2 class="section-title">¬øTienes una idea de proyecto? ¬°Con√©ctemos!</h2>
  <form id="contact-form" class="grid gap-5 lg:grid-cols-2">
    <div class="grid lg:col-span-2">
      <label class="italic mb-2" for="client_name"
        >Tu nombre completo o el de tu negocio</label
      >
      <input
        id="client_name"
        name="client_name"
        class="text-sm border font-light p-4 border-white focus:border-accent focus:outline-none transition-colors"
        type="text"
        placeholder="ej. Pedro Marte o Mariano's Trattoria"
        required
      />
    </div>
    <div class="grid lg:col-span-2">
      <label class="italic mb-2" for="client_email">Tu correo electr√≥nico</label
      >
      <input
        id="client_email"
        name="client_email"
        class="text-sm border font-light p-4 border-white focus:border-accent focus:outline-none transition-colors"
        type="email"
        placeholder="ej. jose@jose-web.com"
        required
      />
    </div>
    <div class="grid lg:col-span-1">
      <label class="italic mb-2" for="industry">Tipo de negocio</label>
      <input
        id="industry"
        name="industry"
        class="text-sm border font-light p-4 border-white focus:border-accent focus:outline-none transition-colors"
        type="text"
        placeholder="ej. Barber√≠a, Pizzer√≠a, Dealer..."
        required
      />
    </div>
    <div class="grid lg:col-span-1">
      <label class="italic mb-2" for="service_type">Tipo de servicio</label>
      <select
        id="service_type"
        name="service_type"
        class="text-sm bg-accent h-14 text-white text-medium transition-colors ps-4 focus:outline-none cursor-pointer hover:bg-accent/80"
        required
      >
        {
          services.map((service) => (
            <option class="bg-white font-medium text-black" value={service.id}>
              {service.title}
            </option>
          ))
        }
        <option class="bg-white font-medium text-black" value="other">Otro (Especificar en mensaje)</option>
      </select>
    </div>
    <div class="grid lg:col-span-2">
      <label class="italic mb-2" for="message">Describe tu proyecto</label>
      <textarea
        id="message"
        name="message"
        class="text-sm border font-light p-4 border-white focus:border-accent focus:outline-none transition-colors"
        placeholder="Aqu√≠ puedes describir tu proyecto, dudas o un mensaje adicional que te gustar√≠a agregar ^-^"
        rows="12"
        required
        ></textarea>
    </div>
    <input id="date" name="date" class="hidden" type="text" />
    <div class="grid lg:col-span-2">
      <button
        id="submit-btn"
        type="button"
        class="flex flex-row-reverse items-center justify-center py-3 px-6 text-sm cursor-pointer hover:scale-105 transition-all hover:tracking-wider bg-accent flex-1 gap-4"
        aria-label="Enviar formulario de contacto"
      >
      <div id="grecaptcha-wrapper"></div>
        <span>(Enviar correo)</span>
        <div
          id="form-loader"
          class="size-5 rounded-full border-t-3 border-white animate-spin duration-100 hidden"
        >
        </div>
      </button>
      <p class="text-white/70 text-pretty text-sm mt-2">
        O escribeme directamente ¬°estoy dispuesto a responder todas tus dudas! <a
          class="text-white underline"
          href="mailto:contact@jose-web.com">contact@jose-web.com</a
        >
      </p>
    </div>
  </form>
</section>
<style is:global>
  .grecaptcha-badge {
    visibility: hidden !important;
  }
</style>
<script src="https://www.google.com/recaptcha/api.js?onload=onRecaptchaLoad&render=explicit" async defer></script>
<script>
  declare global {
    interface Window {
      grecaptcha: any
      onSubmit: (token: string) => void
      onRecaptchaLoad: () => void
    }
  }
  import emailjs from '@emailjs/browser'

  const {
    PUBLIC_EMAILJS_KEY,
    PUBLIC_SERVICE_ID,
    PUBLIC_TEMPLATE_ID,
    PUBLIC_RECAPTCHA_SITE_KEY,
  } = import.meta.env

  if (!PUBLIC_EMAILJS_KEY || !PUBLIC_SERVICE_ID || !PUBLIC_TEMPLATE_ID) {
    console.error('Faltan variables de entorno de EmailJS!!!')
  }

  if (!PUBLIC_RECAPTCHA_SITE_KEY) {
    console.error('Error en la SITEKEY DE RECAPTCHA')
  }
  let widgetId: any
  function onRecaptchaLoad() {
  try {
    widgetId = window.grecaptcha.render('grecaptcha-wrapper', {
      sitekey: PUBLIC_RECAPTCHA_SITE_KEY,
      size: 'invisible',
      callback: window.onSubmit,
      'error-callback': function() {
        console.error('Error en reCAPTCHA')
        alert('Error al cargar reCAPTCHA. Por favor, intenta de nuevo.')
      }
    })
  } catch (error) {
    console.error('Error al inicializar reCAPTCHA:', error)
  }
}

  function changeBtnStyles(state: boolean | null) {
  const btn = document.getElementById('submit-btn') as HTMLButtonElement
  const btnSpan = btn.querySelector('span') as HTMLElement
  
  if (state === null) {
    // null = Cargando
    btn.disabled = true
    btn.classList.remove('hover:scale-105', 'hover:tracking-wider', 'cursor-pointer')
    btnSpan.innerText = 'Enviando...'
  } else if (state === true) {
    // true = Enviado
    btn.disabled = true
    btn.classList.remove('hover:scale-105', 'hover:tracking-wider', 'cursor-pointer')
    btn.classList.add('bg-green-700')
    btnSpan.innerText = '¬°Enviado correctamente!'
  } else {
    // false = Error
    btn.disabled = true
    btn.classList.remove('hover:scale-105', 'hover:tracking-wider', 'cursor-pointer')
    btn.classList.add('bg-red-700')
    btnSpan.innerText = 'ü•≤ Ha ocurrido un error, intente m√°s tarde'
  }
}

  // Inicializar EmailJS
  emailjs.init(PUBLIC_EMAILJS_KEY)

  const form = document.getElementById('contact-form') as HTMLFormElement
  const dateInput = document.getElementById('date') as HTMLInputElement
  const loader = document.getElementById('form-loader') as HTMLElement
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement


  // Esta funci√≥n es llamada autom√°ticamente por reCAPTCHA V2 Invisible cuando el captcha se completa exitosamente.
  // El token es recibido como par√°metro.
  async function onSubmit(token: string) {
  try {
    dateInput.value = new Date().toLocaleString()
    loader.classList.remove('hidden')
    changeBtnStyles(null) // Estado de carga

    const result = await emailjs.sendForm(
      PUBLIC_SERVICE_ID,
      PUBLIC_TEMPLATE_ID,
      form
    )

    if (result?.status === 200) {
      changeBtnStyles(true) // Estado de √©xito
      form.reset()
    } else {
      throw new Error('Error al enviar el formulario')
    }
  } catch (error) {
    console.error('Error en onSubmit:', error)
    changeBtnStyles(false) // Estado de error
    
    // Resetear reCAPTCHA en caso de error para permitir otro intento
    if (widgetId !== undefined) {
      window.grecaptcha.reset(widgetId)
    }
  } finally {
    loader.classList.add('hidden')
    
    // Remover el token input si se agreg√≥
    const tokenInput = form.querySelector('input[name="recaptcha_token"]')
    if (tokenInput) {
      tokenInput.remove()
    }
  }
}

  submitBtn.addEventListener('click', (e) => {
    e.preventDefault()
    
    // Primero validar el formulario
    if (!form.checkValidity()) {
      form.reportValidity()
      return // Salir si la validaci√≥n falla
    }
    
    // Si el formulario es v√°lido, verificar reCAPTCHA
    if (widgetId !== undefined && window.grecaptcha) {
      try {
        window.grecaptcha.execute(widgetId)
      } catch (error) {
        console.error('Error al ejecutar reCAPTCHA:', error)
        alert('Error al cargar el captcha. Por favor, recarga la p√°gina.')
      }
    } else {
      console.error('reCAPTCHA no est√° cargado correctamente')
      alert('Error: reCAPTCHA no est√° disponible. Por favor, recarga la p√°gina.')
    }
})

  // Hacer onSubmit y onRecaptchaLoad global para que Google lo encuentre (es necesario)
  window.onSubmit = onSubmit
  window.onRecaptchaLoad = onRecaptchaLoad
</script>
<script>
  import { gsap } from 'gsap'
  import { ScrollTrigger } from 'gsap/all'

  gsap.registerPlugin(ScrollTrigger)

  const formGrid = document.querySelector('#contact-form')
  const inputs = formGrid?.querySelectorAll('div')

  const isMobile = () => window.innerWidth <= 765


  if (inputs) {
    if (isMobile()) {
      inputs.forEach(step => {
        gsap.from(step, {
          scrollTrigger: {
            trigger: step,
            start: 'top bottom',
            end: 'bottom top',
            toggleActions: 'play none none none',
          },
        scale: .2,
        ease: 'power.inOut',
        duration: .3
        })
      })
    } else {
      gsap.from(inputs, {
      scrollTrigger: {
        trigger: formGrid,
        start: 'top bottom',
        end: 'bottom top',
        toggleActions: 'play none none none',
      },
      opacity: 0,
      scale: 0,
      ease: 'back.inOut',
      stagger: .1
      })
    }
  }
</script>
