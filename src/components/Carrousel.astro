---
import { Image } from 'astro:assets'

interface Props {
  images: string[]
  textAlt: string
}

const { images, textAlt } = Astro.props
const carouselId = `carousel-${Math.random().toString(36).substr(2, 9)}`
---

<div class="embla overflow-hidden relative" data-carousel={carouselId}>
  <div class="embla__viewport">
    <div class="embla__container flex">
      {
        images.map((image, i) => (
          <div class="flex-[0_0_100%] aspect-[4/3] overflow-hidden">
            <Image
              src={`/projects/${image}`}
              width={800}
              height={800}
              class="size-full object-cover"
              alt={`${textAlt} - Imagen ${i + 1}`}
            />
          </div>
        ))
      }
    </div>
  </div>
  <div
    class="embla__dots flex justify-center gap-2 absolute bottom-4 left-1/2 transform -translate-x-1/2 z-20 pointer-events-none"
  >
    {
      images.map((_, i) => (
        <button
          class="embla__dot size-2.5 rounded-full bg-white/30 transition-all pointer-events-auto"
          style="filter: drop-shadow(0 2px 4px rgba(0,0,0,0.5));"
          aria-label={`Ir a la slide ${i + 1}`}
          data-index={i}
        />
      ))
    }
  </div>
</div>

<script>
  import emblaCarrousel from 'embla-carousel'

  window.addEventListener('DOMContentLoaded', () => {
    // Inicializar todos los carousels en la página
    const carousels = document.querySelectorAll('[data-carousel]')
    
    carousels.forEach((carouselElement) => {
      const emblaNode = carouselElement.querySelector('.embla__viewport') as HTMLElement
      const dotNodes = carouselElement.querySelectorAll('.embla__dot') as NodeListOf<HTMLElement>

      if (!emblaNode) return

      const embla = emblaCarrousel(emblaNode, { loop: false })

      // Función para actualizar los dots específicos de este carousel
      const updateDots = () => {
        const selectedIndex = embla.selectedScrollSnap()
        dotNodes.forEach((dot, index) => {
          if (index === selectedIndex) {
            dot.classList.remove('bg-white/30')
            dot.classList.add('bg-accent')
          } else {
            dot.classList.remove('bg-accent')
            dot.classList.add('bg-white/30')
          }
        })
      }

      // Event listeners para los dots de este carousel específico
      dotNodes.forEach((dot, index) => {
        dot.addEventListener('click', () => {
          embla.scrollTo(index)
        })
      })

      // Actualizar dots cuando cambie el slide
      embla.on('select', updateDots)

      // Inicializar el estado de los dots
      updateDots()
    })
  })
</script>