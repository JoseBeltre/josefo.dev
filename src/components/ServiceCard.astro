---
import type { AstroComponentFactory } from 'astro/runtime/server/index.js'
import Button from './Button.astro'
import Tag from './Tag.astro'

interface Props {
  title: string,
  description: string,
  features: string[],
  icon: AstroComponentFactory,
  index: number
}

const { title, description, features, icon: Icon, index } = Astro.props
const blue = index % 2 === 0
---

<article class:list={[
  "bg-layer rounded-xl border border-white/20 p-5",
  { "hover:border-accent": !blue },
  { "hover:border-secondary": blue },
]}>
  <div class:list={[
    "p-2 rounded-full inline-block",
    { "bg-accent/30": !blue },
    { "bg-secondary/30": blue },
  ]}>
    <Icon class:list={[
      { "text-accent": !blue },
      { "text-secondary": blue },
    ]} size={36} stroke={1.5} />
  </div>

  <h2 class="my-2 text-2xl leading-6 text-balance">
    <Tag class:list={[
      "text-accent font-medium italic",
      { "text-accent": !blue },
      { "text-secondary": blue },
    ]} >
      <span class="text-white">{title}</span>
    </Tag>
  </h2>

  <p class="leading-5">
    <Tag tag="p" class="font-semibold text-highlight">
      <span class="font-normal text-white/70">
        {description}
      </span>
    </Tag>
  </p>

  <div class="accordion mt-4 overflow-hidden h-0 transition-[height] duration-700">
    <h3 class="mt-4 font-semibold italic text-highlight">Este plan incluye:</h3>
    <ul class="space-y-4 text-base text-white/70 leading-5 px-1">
      {
        features.map(feature => 
          <li><span class="text-highlight">-</span> {feature}</li>
        )
        }
    </ul>
  </div>

  <div class="mt-5 grid gap-2">
    <Button class="toggle-accordion flex-1 border hover:bg-white hover:text-dark">¿Qué incluye?</Button>
    <Button class:list={[
      "flex-1",
      { "bg-primary hover:bg-accent": !blue },
      { "bg-secondary hover:bg-[#427eff] text-dark font-medium": blue },
      ]}>Solicitar ahora</Button>
  </div>
</article>

<script>
  document.querySelectorAll('.toggle-accordion').forEach((btn) => {
  btn.addEventListener('click', () => {
    const container = btn.closest('article')
    const accordion = container!.querySelector('.accordion') as HTMLElement

    if (!accordion) return

    const isOpen = accordion.classList.contains('open')

    if (isOpen) {
      accordion.style.height = accordion.scrollHeight + 'px'
      requestAnimationFrame(() => {
        accordion.style.height = '0px'
        accordion.classList.remove('open')
      })
      setTimeout(() => {
        btn.innerHTML = '(¿Qué incluye?)'
      }, 800)
    } else {
      accordion.classList.add('open')
      accordion.style.height = accordion.scrollHeight + 'px'
      setTimeout(() => {
        btn.innerHTML = '(Ver menos)'
      }, 800)
      accordion.addEventListener(
        'transitionend',
        () => {
          accordion.style.height = 'auto'
        },
        { once: true }
      )
    }
  })
})

</script>
